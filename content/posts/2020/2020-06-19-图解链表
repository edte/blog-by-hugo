---
title: 图解链表
author: "edte"
categories: ["数据结构"]
tag: ["数据结构"]
date: 2020-06-19
---



## 前言

这篇文章是我学习链表的笔记总结，没有主要参考的书籍，尝试过阅读《大话数据结构》，但是这本书读着不太舒服，主要参考各种博客，以及刷了一些 leetcode 上的链表的题来巩固。

这篇文章同样的，在使用一些术语时，我会尽量使用英文。另外有大量的原创图，以及 c 语言的具体实现。

## 链表

### 介绍

>  链表(linked list) 是一种线性表（linear list），元素（element）间一对一，逻辑上相连，但是在内存上分配不连续。

链表每个元素被称为节点（node), 由数据域（data filed）和 指针域（pointer filed) 组成。

![](https://ae02.alicdn.com/kf/Heff3a401733f424baa7ad039d9a6e1847.png)

linked list 的每个 node 在内存上并不相连，如

![](https://ae02.alicdn.com/kf/Hdea7489f203645aa8794d7bc1e90bbf3E.png)

因此，node 间想要相连，就需要知道下一个 node 的 address，这就要借助 pointer。故每个 node 的 data filed 存这个 node 的 data， 而 pointer filed 则存下一个 node 的 address。

![](https://ae03.alicdn.com/kf/H347448e2a7734e3cabc9b2ae67309718K.png)



我们知道链表的节点是有限的，所以最后一个 node 就没有下一个 node，故最后一个 node 的 pointer filed  存的 addres 就为 NULL.

![](https://ae02.alicdn.com/kf/H75e57750b9934f44af7b072479a1a111e.png)

### 性质

因为每个 node 都存下一个node 的 address，所以要访问一个 node 的话，就需要知道上一个 node 才行，故 linked list 查找（search） 元素，更新（update）元素，插入元素（insert），删除（delete）元素都需要先找到这个 node，所以就需要遍历链表。

search 和 update 需要遍历链表，故需要一个一个的找，时间复杂度是 O(n).

insert 和 delete 不算遍历的过程，只是执行 insert  和 delete 的话，只需更改 address 即可，故时间复杂度是 O(1).

这里看字不容易理解，可以继续往下看具体的代码实现，哪里有详细的图解说明。

### 头指针/头节点/首元节点

这三个是链表中容易搞混的概念，我们这里用来解释一下。

我们现在知道链表是由 node 组成的，现在我们先来弄几个 node 组成的链表

![](https://ae01.alicdn.com/kf/H77b3b6501a3944848a1eadcae4ddda87V.png)

现在我们要操作这个链表，肯定需要知道首地址(head address)，如果我们要在函数中操作这个链表，也需要把首地址传进去，那干脆直接用个头指针(head pointer) 指向第一个节点，这个指针就是 head pointer, 我们需要操作链表，所以这个是必须要有的

![](https://ae03.alicdn.com/kf/H6744bc36b0434f7ca5bb60acd7073beeX.png)

现在如果我们要在链表中间插入 node, 前面有 node，操作方式都是一样的，但是如果我们要在第一个节点前加一个 node 的话，前面没有 node， 那么在 intert 函数中肯定要分情况。

同样的，由有链表在内存中是不连续分配的，那么我们怎么知道一共有多少个 node 呢，所以为了解决这些问题，有时候我们会在第一个节点前，也就是存真正的数据前的那个节点前再加一个节点，这个节点的 data filed 用来存链表长度等特殊的信息。同时操作插入第一个节点也比较方便，这个节点就叫头节点 (head node)

![](https://ae03.alicdn.com/kf/H33d728695dcd4971b1bdf20995ae8c0cd.png)

现在我们已经知道头节点和头指针是怎么回事了，首元节点就比较容易理解了，也就是存正式数据的第一个节点，如上面的 first node, 这是为了区分头节点取的名字

因为有 head node 和没有 head node 这两种情况，所以在一些操作上也是有差距的，具体要看实际情况。

如没有 head node 的空表, 直接头指针连接 NULL

![](https://ae02.alicdn.com/kf/H4887d2098b284793840ffa6ac53cc16d1.png)

而有 head node 的空表，则是 head node 连接 NULL

![](https://ae02.alicdn.com/kf/H91bf54f28bce40849e28ee834c8db37bk.png)

### 分类

链表只是强调了 data 间一对一的关系，以及内存上的分配问题，实际上链表也有几种情况。

单链表(single linked list node)：每个节点只存下一个节点的地址和数据

单链表的节点

![](https://ae03.alicdn.com/kf/Hb4967451ed404cbb85ce9f10468eb4a9c.png)

普通的单链表

![](https://ae02.alicdn.com/kf/Hdf7825fbb88c45a7b2bf8984e0ed2cb3t.png)

单链表中还有一种特殊的情况，尾节点（tail node）不指向 NULL，而指向 head pointer，那这个链表就成为了一个环，这个链表叫做循环链表（circular linked list）

![](https://ae01.alicdn.com/kf/Hbed1a41e023d481d8ca43ac863f267fep.png)

双链表（double linked list）对应于单链表，双链表每个 node 存上一个和下一个 node 的地址，以及 data。

节点

![](https://ae03.alicdn.com/kf/H30527505d5364088943a16891e4145f5F.png)

双链表

![](https://ae03.alicdn.com/kf/Hff7052eca616455fb0baab6c53f58bf5v.png)

静态链表：链表分为静态和动态，动态即内存不连续分配，静态这连续分配，用数组实现，我们一般说链表都说的动态链表（草，什么 sb 翻译，老子半天没搞懂）

注意静态链表和顺序表的区别

## 单链表

### create

>  单链表是链表中的一种，每个 node 存下一个 node 的地址以及数据，单链表是单向的。

single linked list 是由 node 组成的，要实现的话首先就要实现 node

![](https://ae03.alicdn.com/kf/Hb4967451ed404cbb85ce9f10468eb4a9c.png)

```
// single linked list node
typedef struct {
    int data;  // data filed
    struct Node *next;  // pointer filed
} Node;
```

这段代码声明了 single linked list 的 node ，然后声明了存数据的 data，以及存下一个 node address 的 next.

我们在前面说了，单链表可以有头节点或没有，很多时候我们会建立头节点，所以这里还是以有头节点为例子。

我们继续，来创个函数来声明 single linked list

![](https://ae02.alicdn.com/kf/Hed23afa0a05c4e168399bbd7468e13a8O.png)

```
// CreateList 建立一个有头节点的单链表
Node *Createlist() {
    // 头节点
    Node *new_node = malloc(sizeof(int));
    if (new_node == NULL) {
        printf("crete linked list failed!");
        exit(-1);
    }
    // 空表，指向 NULL
    new_node->next = NULL;
//    new_node->data=  0;
    return new_node;
}
```

这个函数建立了一个有头节点的单链表，然后返回头节点，要使用的话，需要赋值给头指针，如

```
int main(void) {
	Node *head = Createlist();
	
	return 0;
} 
```

我们在这个函数中，使用 malloc 函数分配了内存给头节点，然后判断是否分配成功，再指向 NULL，然后头节点的 data filed 自己看存什么数据，这里我们没有存有意义的数据。然后返回这个头节点。



这个函数没有传入参数，而是把头节点返回，我们也可以把头节点直接传进去，如

```
// 传入 Node 指针的指针，因为要在函数改变 Node 指针的值
void CreateList(Node **head) {
    // 先给头节点动态分配内存，然后把头指针指向这块内存，即指向头节点
    *head = (Node *) malloc(sizeof(int));
    if (*head == NULL) {
		printf("create single linked list failed!");
	}
    (*head)->next = NULL;
//    (*head)->data = 0;
}
```

这个函数同样的创建了一个有头节点的单链表，不过是把头指针当做参数传进去的。需要注意的是头指针 (head) 本身是指向节点的指针（Node *)，而要在函数中改变变量的值，需要传入其地址，故这里是传入头指针的地址，则传入就是指针的指针。然后分配内存，头指针指向头节点，设置 NULL，设置 data，这和刚才返回头节点的函数是相同的。

要使用的话，需要传头指针

```
int main(void) {
	Node *head = NULL;
	CreateList(&head);
	
	return 0;
}
```

### insert







### search

### updte

### delete



## 双链表



## 循环链表



## 静态链表



## 总结



## 参考

[链表](https://zh.wikipedia.org/wiki/链表)